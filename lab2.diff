diff --git a/.vscode/settings.json b/.vscode/settings.json
index e69de29..f5d622f 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -0,0 +1,3 @@
+{
+    "cquery.cacheDirectory": "${workspaceFolder}/.vscode/cquery_cached_index/"
+}
\ No newline at end of file
diff --git a/compile_commands.json b/compile_commands.json
index e69de29..75d4d8a 100644
--- a/compile_commands.json
+++ b/compile_commands.json
@@ -0,0 +1,288 @@
+[
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/entrypgdir.c"
+  ], 
+  "file": "kern/entrypgdir.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/entrypgdir.c"
+  ], 
+  "file": "kern/entrypgdir.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/init.c"
+  ], 
+  "file": "kern/init.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/init.c"
+  ], 
+  "file": "kern/init.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/console.c"
+  ], 
+  "file": "kern/console.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/console.c"
+  ], 
+  "file": "kern/console.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/monitor.c"
+  ], 
+  "file": "kern/monitor.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/monitor.c"
+  ], 
+  "file": "kern/monitor.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/pmap.c"
+  ], 
+  "file": "kern/pmap.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/pmap.c"
+  ], 
+  "file": "kern/pmap.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/kclock.c"
+  ], 
+  "file": "kern/kclock.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/kclock.c"
+  ], 
+  "file": "kern/kclock.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/printf.c"
+  ], 
+  "file": "kern/printf.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/printf.c"
+  ], 
+  "file": "kern/printf.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "kern/kdebug.c"
+  ], 
+  "file": "kern/kdebug.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "kern/kdebug.c"
+  ], 
+  "file": "kern/kdebug.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "lib/printfmt.c"
+  ], 
+  "file": "lib/printfmt.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "lib/printfmt.c"
+  ], 
+  "file": "lib/printfmt.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "lib/readline.c"
+  ], 
+  "file": "lib/readline.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "lib/readline.c"
+  ], 
+  "file": "lib/readline.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "lib/string.c"
+  ], 
+  "file": "lib/string.c"
+ }, 
+ {
+  "directory": "/Volumes/Data/mit6.828/lab2", 
+  "arguments": [
+   "cc", 
+   "-nostdinc", 
+   "-I.", 
+   "-std=gnu99", 
+   "-Wall", 
+   "-Wno-format", 
+   "-Wno-unused", 
+   "-Werror", 
+   "-m32", 
+   "-DJOS_KERNEL", 
+   "-c", 
+   "lib/string.c"
+  ], 
+  "file": "lib/string.c"
+ }
+]
diff --git a/kern/init.c b/kern/init.c
index 1fb9152..d863d18 100644
--- a/kern/init.c
+++ b/kern/init.c
@@ -24,7 +24,7 @@ i386_init(void)
 	// Can't call cprintf until after we do this!
 	cons_init();
 
-	cprintf("6828 decimal is %o octal!\n", 6828);
+	cprintf("\n6828 decimal is %o octal!\n", 6828);
 
 	// Lab 2 memory management initialization functions
 	mem_init();
diff --git a/kern/kdebug.c b/kern/kdebug.c
index 9547143..b532039 100644
--- a/kern/kdebug.c
+++ b/kern/kdebug.c
@@ -179,6 +179,12 @@ debuginfo_eip(uintptr_t addr, struct Eipdebuginfo *info)
 	//	Look at the STABS documentation and <inc/stab.h> to find
 	//	which one.
 	// Your code here.
+	stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
+	if (lline <= rline) {
+		info->eip_line = stabs[lline].n_desc;
+	} else {
+		return -1;
+	}
 
 
 	// Search backwards from the line number for the relevant filename
diff --git a/kern/monitor.c b/kern/monitor.c
index e137e92..1875059 100644
--- a/kern/monitor.c
+++ b/kern/monitor.c
@@ -24,6 +24,7 @@ struct Command {
 static struct Command commands[] = {
 	{ "help", "Display this list of commands", mon_help },
 	{ "kerninfo", "Display information about the kernel", mon_kerninfo },
+	{ "backtrace", "Display current backtrace of the kernel", mon_backtrace },
 };
 
 /***** Implementations of basic kernel monitor commands *****/
@@ -58,6 +59,24 @@ int
 mon_backtrace(int argc, char **argv, struct Trapframe *tf)
 {
 	// Your code here.
+    cprintf("Stack backtrace:\n");
+    uintptr_t current_ebp = read_ebp();
+    struct Eipdebuginfo info;
+    while (current_ebp) {
+      uintptr_t eip = *((uintptr_t*)(current_ebp + 4));
+      cprintf("  ebp %08x  eip %08x  args", current_ebp, eip);
+      for (int i = 0; i < 5; i++) {
+        uintptr_t arg = *((uintptr_t*)(current_ebp + 8 + i * 4));
+        cprintf(" %08x", arg);
+      }
+      current_ebp = *(uintptr_t*)current_ebp;
+      cprintf("\n");
+ 
+      if (debuginfo_eip(eip, &info) == 0) {
+        cprintf("         %s:%d: %.*s+%d\n", info.eip_file, info.eip_line,
+                info.eip_fn_namelen, info.eip_fn_name, eip - info.eip_fn_addr);
+      }
+    }
     return 0;
  }
 
diff --git a/kern/pmap.c b/kern/pmap.c
index 727ea68..5cc99f5 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -103,7 +103,14 @@ boot_alloc(uint32_t n)
 	//
 	// LAB 2: Your code here.
 
-	return NULL;
+	result = nextfree;
+	nextfree = ROUNDUP(nextfree + n, PGSIZE);
+
+	if (PADDR(nextfree) > npages * PGSIZE) {
+		panic("Out of memory");
+	}
+
+	return result;
 }
 
 // Set up a two-level page table:
@@ -125,7 +132,7 @@ mem_init(void)
 	i386_detect_memory();
 
 	// Remove this line when you're ready to test this function.
-	panic("mem_init: This function is not finished\n");
+	// panic("mem_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -148,6 +155,8 @@ mem_init(void)
 	// array.  'npages' is the number of physical pages in memory.  Use memset
 	// to initialize all fields of each struct PageInfo to 0.
 	// Your code goes here:
+	pages = (struct PageInfo*) boot_alloc(sizeof(struct PageInfo) * npages);
+	memset(pages, 0, sizeof(struct PageInfo) * npages);
 
 
 	//////////////////////////////////////////////////////////////////////
@@ -172,6 +181,8 @@ mem_init(void)
 	//      (ie. perm = PTE_U | PTE_P)
 	//    - pages itself -- kernel RW, user NONE
 	// Your code goes here:
+	boot_map_region(kern_pgdir, UPAGES, ROUNDUP(sizeof(struct PageInfo) * npages, PGSIZE),
+					PADDR(pages), PTE_U);
 
 	//////////////////////////////////////////////////////////////////////
 	// Use the physical memory that 'bootstack' refers to as the kernel
@@ -184,6 +195,7 @@ mem_init(void)
 	//       overwrite memory.  Known as a "guard page".
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
+	boot_map_region(kern_pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W);
 
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE.
@@ -193,6 +205,7 @@ mem_init(void)
 	// we just set up the mapping anyway.
 	// Permissions: kernel RW, user NONE
 	// Your code goes here:
+	boot_map_region(kern_pgdir, KERNBASE, -KERNBASE, 0, PTE_W);
 
 	// Check that the initial page directory has been set up correctly.
 	check_kern_pgdir();
@@ -252,8 +265,12 @@ page_init(void)
 	// NB: DO NOT actually touch the physical memory corresponding to
 	// free pages!
 	size_t i;
+	physaddr_t first_free_page = PADDR(boot_alloc(0));
 	for (i = 0; i < npages; i++) {
 		pages[i].pp_ref = 0;
+		physaddr_t current_paddr = page2pa(&pages[i]);
+		if (i == 0 || (IOPHYSMEM <= current_paddr && current_paddr < first_free_page))
+			continue;
 		pages[i].pp_link = page_free_list;
 		page_free_list = &pages[i];
 	}
@@ -275,6 +292,17 @@ struct PageInfo *
 page_alloc(int alloc_flags)
 {
 	// Fill this function in
+	if (page_free_list) {
+		struct PageInfo *result = page_free_list;
+		page_free_list = result->pp_link;
+		result->pp_link = 0;
+
+		if (alloc_flags & ALLOC_ZERO) {
+			memset(page2kva(result), 0, PGSIZE);
+		}
+
+		return result;
+	}
 	return 0;
 }
 
@@ -288,6 +316,12 @@ page_free(struct PageInfo *pp)
 	// Fill this function in
 	// Hint: You may want to panic if pp->pp_ref is nonzero or
 	// pp->pp_link is not NULL.
+	if (pp->pp_ref != 0 || pp->pp_link) {
+		panic("page_free with nonzero refcount or nonnull link");
+	}
+
+	pp->pp_link = page_free_list;
+	page_free_list = pp;
 }
 
 //
@@ -327,6 +361,28 @@ pte_t *
 pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
 	// Fill this function in
+	pde_t pde = pgdir[PDX(va)];
+	if (pde & PTE_P) {
+		physaddr_t pte_pa = PTE_ADDR(pde);
+		pte_t *pte = KADDR(pte_pa);
+		return &pte[PTX(va)];
+	} else {
+
+		// not present yet
+		if (create) {
+			struct PageInfo *page = page_alloc(true);
+			if (page) {
+				pte_t *new_pte = (pte_t *)page2kva(page);
+				pgdir[PDX(va)] = PADDR(new_pte) | PTE_W | PTE_U | PTE_P;
+				page->pp_ref ++;
+				return &new_pte[PTX(va)];
+			} else {
+				return NULL;
+			}
+		} else {
+			return NULL;
+		}
+	}
 	return NULL;
 }
 
@@ -345,6 +401,13 @@ static void
 boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
 {
 	// Fill this function in
+	// Beware overflow!
+	for (uintptr_t i = 0, addr_va = va, addr_pa = pa;i < size;i += PGSIZE, addr_va += PGSIZE, addr_pa += PGSIZE) {
+		pte_t *pte = pgdir_walk(pgdir, (void *)addr_va, true);
+		if (pte) {
+			*pte = addr_pa | perm | PTE_P;
+		}
+	}
 }
 
 //
@@ -376,8 +439,28 @@ int
 page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 {
 	// Fill this function in
+	pte_t *pte = pgdir_walk(pgdir, va, true);
+	if (pte) {
+		if (*pte & PTE_P) {
+			// already mapped
+			physaddr_t mapped_addr = PTE_ADDR(*pte);
+			if (mapped_addr == page2pa(pp)) {
+				// already done
+				// update perm
+				*pte = page2pa(pp) | perm | PTE_P;
+				tlb_invalidate(pgdir, va);
 				return 0;
 			}
+			page_remove(pgdir, va);
+		}
+
+		pp->pp_ref ++;
+		*pte = page2pa(pp) | perm | PTE_P;
+		tlb_invalidate(pgdir, va);
+		return 0;
+	}
+	return -E_NO_MEM;
+}
 
 //
 // Return the page mapped at virtual address 'va'.
@@ -394,6 +477,15 @@ struct PageInfo *
 page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
 	// Fill this function in
+	pte_t *pte = pgdir_walk(pgdir, va, false);
+	if (pte) {
+		if (*pte & PTE_P) {
+			if (pte_store) {
+				*pte_store = pte;
+			}
+			return pa2page(PTE_ADDR(*pte));
+		}
+	}
 	return NULL;
 }
 
@@ -416,6 +508,13 @@ void
 page_remove(pde_t *pgdir, void *va)
 {
 	// Fill this function in
+	pte_t *pte;
+	struct PageInfo *page = page_lookup(pgdir, va, &pte);
+	if (page) {
+		page_decref(page);
+		*pte = 0;
+		tlb_invalidate(pgdir, va);
+	}
 }
 
 //
diff --git a/lib/printfmt.c b/lib/printfmt.c
index 28e01c9..af23abe 100644
--- a/lib/printfmt.c
+++ b/lib/printfmt.c
@@ -206,10 +206,9 @@ vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
 		// (unsigned) octal
 		case 'o':
 			// Replace this with your code.
-			putch('X', putdat);
-			putch('X', putdat);
-			putch('X', putdat);
-			break;
+			num = getuint(&ap, lflag);
+			base = 8;
+			goto number;
 
 		// pointer
 		case 'p':
